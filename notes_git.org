* Notes du tutoriel, en vrac

** Généralités

*** Création sans modification

git --version
(pour connaître le numéro de version, mais surtout pour s'assurer
que git est là et marche... le numéro de version n'a pas grande
importance, en fait)

git config --global user.name "Jean-Luc Ancey"
(variantes: "Jean-Luc Ancey Amarelia, Jean-Luc Ancey Courteline")

git config --global user.email "triancey@gmail.com"
(variante: "jlancey@amarelia.ch, jlanceycourteline@amarelia.ch")

mkdir toto
(par exemple, évidemment: on donne au répertoire le nom qu'on veut)

cd toto
(sans blague? faut entrer dans le répertoire où on travaille?
I'd never have guessed!)

git init
(crée un sous-répertoire .git, avec plein de trucs utiles)

git status
(à tout moment: permet de voir ce qui a été modifié depuis
la dernière interaction -- pull ou push -- avec le dépôt)

Créer un fichier à cet endroit là (par ex., index.html)
(dans l'exemple; en vrai, ça peut être 245 fichiers)

git add [fileName]

git commit -m "Explication du commit"

Attention, à ce stade du récit, le commit n'est pris en
compte que localement.

*** Travail sur une branche à part

Bon, comme Git fait du versioning, on va un peu modifier
les fichiers...

git add [fichiers modifiés]

git commit -m "Explication de la modification"

(Attention, à ce stade, la modification n'a eu lieu
que localement)

git log
(affiche l'explication des modifications)

git branch [nomQu'onVeut]
(il faut nommer la branche... et tant qu'à faire, lui donner un nom
qui explique pourquoi on se détache du master)

git branch
(liste les branches -- l'astérisque dit sur quelle branche on est)

git checkout [nomdelabranche]
(git checkout master revient au master... je crois)

On reremodifie ce qu'on veut...

git add [nomsDesFichiers]

git commit -m "Explication du commit"

git log
(liste des modifications)

** Validation de la branche

git checkout master

git merge [nom de la branche à rapatrier]

git log
(pour vérifier si ça a marché)

git branch -d [ nom de la branche à supprimer]
(purge; on n'est pas obligé, mais c'est recommandé après une fusion)

** Travail collaboratif

*** Création du dépôt distant et publication sur lui

Créer un compte sur le site web de github (ou le Gitea de
Numéricoop, ou ailleurs)

Toujours sur le web, créer un depository en lui donnant un nom

git remote add origin [URL du dépôt]

git remote
(voit ce qu'il y a à distance)

git push origin master
(envoie sur le dépôt distant)

*** Recopiage d'un dépôt distant

(l'inscription dans Github, ou sur un autre gestionnaire de
dépôts du type du Gitea de Numéricoop, doit avoir eu lieu préalablement)

Pour cloner un truc présent sur Github, rien de particulier à faire
(c'est différent sur le Gitea de Numéricoop, qui n'est pas public et
demandera donc un mot de passe même pour simplement recopier le
contenu d'un repository); en revanche, pour poster (participer),
il faut, même sur Github, une autorisation par le créateur du dépôt
(sur Github au moins, on fait ça dans la partie Settings du projet).
Les autorisations, au moins sur Github, sont gérées projet par projet;
ça se traduit par l'envoi d'un courriel d'invitation, dans lequel il
y aura une ligne clicable pour valider.

git init
(du moins je suppose)

git remote add origin [URL du dépôt]

git pull origin master

*** Retour à un commit antérieur

Ce n'est pas recommandé en théorie, mais pour la lecture de mon
manuel c'est souvent le seul moyen d'être sûr qu'on est bien dans
le cas de figure décrit à une page précise du bouquin:

git remote add origin [URL du dépôt]
(si ça n'est pas déjà fait dans le dépôt où l'on se trouve)

git pull origin master
(pour avoir, en même temps que la dernière version, tout l'historique
des commits)

git reset <nom_du_commit> --hard
(attention, c'est dangereux: ça vire tous les fichiers postérieurs
au commit; c'est précisément ce que je veux faire, mais quand il ne
s'agit pas d'étudier mon bouquin d'apprentissage c'est généralement
une très mauvaise idée)

* Adresse de dépôts

https://github.com/jeanlucancey/notes_git.git

https://github.com/jambonrose/DjangoUnleashed-1.8/

https://git.numericoop.fr/Numericoop/TODO.git

https://git.numericoop.fr/Bac_A_Sable/azerty

https://github.com/jeanlucancey/tuto_open_classrooms.git

* Exemple d'une récupération depuis Github

Sur la marge gauche: ce que je tape au prompt

En retrait de trois espaces: les réponses obtenues

mkdir notes_git

cd notes_git

git --version

   git version 1.7.10.4

git config --global user.name "Jean-Luc Ancey"

git config --global user.email "jlanceycourteline@amarelia.ch"

git init

   Initialized empty Git repository in /home/jlancey/rabiot/notes_git/.git/

git remote add origin https://github.com/jeanlucancey/notes_git.git

git pull origin master

   remote: Counting objects: 29, done.

   remote: Compressing objects: 100% (23/23), done.

   remote: Total 29 (delta 12), reused 22 (delta 5), pack-reused 0

   Unpacking objects: 100% (29/29), done.

   From https://github.com/jeanlucancey/notes_git

    * branch            master     -> FETCH_HEAD

* Exemple d'une récupération depuis le Gitea de Numéricoop

git clone https://git.numericoop.fr/Numericoop/TODO.git

git clone https://git.numericoop.fr/Bac_A_Sable/azerty

Nota: l'extension ".git" paraît superfétatoire.

Plusieurs choses:

- sur Github, les données sont en général publiques, pas sur
Gitea; du coup, très logiquement, Gitea demande un Username
(il faut répondre par l'adresse de courriel qu'on a donnée;
l'alias ou nickname ne fonctionne pas) et le mot de passe
correspondant;

- il crée un répertoire ("TODO" ou "azerty") dans lequel
il faut rentrer.
